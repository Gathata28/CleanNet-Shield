{
  "errors": [],
  "generated_at": "2025-06-28T10:00:28Z",
  "metrics": {
    "_totals": {
      "CONFIDENCE.HIGH": 9,
      "CONFIDENCE.LOW": 1,
      "CONFIDENCE.MEDIUM": 4,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 1,
      "SEVERITY.LOW": 10,
      "SEVERITY.MEDIUM": 3,
      "SEVERITY.UNDEFINED": 0,
      "loc": 3471,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 17,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/core\\__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 6,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/core\\blocker\\__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 19,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/core\\blocker\\__init_legacy__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/core\\blocker\\advanced_blocker.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 1,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 71,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/core\\blocker\\blocking_rule.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 154,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/core\\blocker\\blocklist_updater.py": {
      "CONFIDENCE.HIGH": 1,
      "CONFIDENCE.LOW": 1,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 1,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 750,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/core\\blocker\\dns_config.py": {
      "CONFIDENCE.HIGH": 3,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 3,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 417,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/core\\blocker\\hosts_blocker.py": {
      "CONFIDENCE.HIGH": 3,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 1,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 3,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 289,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/core\\blocker\\platform_manager.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 180,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/core\\recovery\\__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/core\\recovery\\accountability.py": {
      "CONFIDENCE.HIGH": 1,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 2,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 3,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 493,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/core\\recovery\\journaling.py": {
      "CONFIDENCE.HIGH": 1,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 1,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 418,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/core\\recovery\\streak_tracker.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 415,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/utils\\__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/utils\\logger.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 178,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/utils\\permissions.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 64,
      "nosec": 0,
      "skipped_tests": 0
    }
  },
  "results": [
    {
      "code": "75                 parts = line.split()\n76                 if len(parts) >= 2 and parts[0] in [\"127.0.0.1\", \"0.0.0.0\"]:\n77                     domains.add(parts[1])\n",
      "col_offset": 65,
      "end_col_offset": 74,
      "filename": "src/core\\blocker\\advanced_blocker.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 605,
        "link": "https://cwe.mitre.org/data/definitions/605.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible binding to all interfaces.",
      "line_number": 76,
      "line_range": [
        76
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.5/plugins/b104_hardcoded_bind_all_interfaces.html",
      "test_id": "B104",
      "test_name": "hardcoded_bind_all_interfaces"
    },
    {
      "code": "350 \n351             response = requests.get(\n352                 source[\"url\"],\n353                 timeout=self.config[\"timeout_seconds\"],\n354                 headers={\"User-Agent\": \"Adult Content Blocker 1.0\"},\n355             )\n356             response.raise_for_status()\n",
      "col_offset": 23,
      "end_col_offset": 13,
      "filename": "src/core\\blocker\\blocklist_updater.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 400,
        "link": "https://cwe.mitre.org/data/definitions/400.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Call to requests without timeout",
      "line_number": 351,
      "line_range": [
        351,
        352,
        353,
        354,
        355
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.5/plugins/b113_request_without_timeout.html",
      "test_id": "B113",
      "test_name": "request_without_timeout"
    },
    {
      "code": "858                     with tarfile.open(tgz_path, \"r:gz\") as tar:\n859                         tar.extractall(path=temp_dir)\n860 \n",
      "col_offset": 24,
      "end_col_offset": 53,
      "filename": "src/core\\blocker\\blocklist_updater.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 22,
        "link": "https://cwe.mitre.org/data/definitions/22.html"
      },
      "issue_severity": "HIGH",
      "issue_text": "tarfile.extractall used without any validation. Please check and discard dangerous members.",
      "line_number": 859,
      "line_range": [
        859
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.5/plugins/b202_tarfile_unsafe_members.html",
      "test_id": "B202",
      "test_name": "tarfile_unsafe_members"
    },
    {
      "code": "5 \n6 import subprocess\n7 import re\n",
      "col_offset": 0,
      "end_col_offset": 17,
      "filename": "src/core\\blocker\\dns_config.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with the subprocess module.",
      "line_number": 6,
      "line_range": [
        6
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.5/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "85                         test_command = [path] + command[1:]\n86                         result = subprocess.run(\n87                             test_command, capture_output=True, text=True, timeout=30\n88                         )\n89                         if result.returncode == 0:\n",
      "col_offset": 33,
      "end_col_offset": 25,
      "filename": "src/core\\blocker\\dns_config.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 86,
      "line_range": [
        86,
        87,
        88
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.5/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "97             # For other commands, try direct execution\n98             result = subprocess.run(command, capture_output=True, text=True, timeout=30)\n99             return result.returncode == 0, result.stdout\n",
      "col_offset": 21,
      "end_col_offset": 88,
      "filename": "src/core\\blocker\\dns_config.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 98,
      "line_range": [
        98
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.5/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "325                     parts = line.strip().split()\n326                     if len(parts) >= 2 and parts[0] == \"0.0.0.0\":\n327                         blocked_domains.add(parts[1])\n",
      "col_offset": 55,
      "end_col_offset": 64,
      "filename": "src/core\\blocker\\hosts_blocker.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 605,
        "link": "https://cwe.mitre.org/data/definitions/605.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible binding to all interfaces.",
      "line_number": 326,
      "line_range": [
        326
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.5/plugins/b104_hardcoded_bind_all_interfaces.html",
      "test_id": "B104",
      "test_name": "hardcoded_bind_all_interfaces"
    },
    {
      "code": "337         try:\n338             import subprocess\n339 \n",
      "col_offset": 12,
      "end_col_offset": 29,
      "filename": "src/core\\blocker\\hosts_blocker.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with the subprocess module.",
      "line_number": 338,
      "line_range": [
        338
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.5/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "339 \n340             subprocess.run([\"ipconfig\", \"/flushdns\"], capture_output=True, check=True)\n341             self.logger.info(\"DNS cache flushed\")\n",
      "col_offset": 12,
      "end_col_offset": 86,
      "filename": "src/core\\blocker\\hosts_blocker.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 340,
      "line_range": [
        340
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.5/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "339 \n340             subprocess.run([\"ipconfig\", \"/flushdns\"], capture_output=True, check=True)\n341             self.logger.info(\"DNS cache flushed\")\n",
      "col_offset": 12,
      "end_col_offset": 86,
      "filename": "src/core\\blocker\\hosts_blocker.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 340,
      "line_range": [
        340
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.5/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "112 \n113     def set_email(\n114         self,\n115         email: str,\n116         smtp_server: str = \"smtp.gmail.com\",\n117         smtp_port: int = 587,\n118         username: str = \"\",\n119         password: str = \"\",\n120     ) -> bool:\n121         \"\"\"\n122         Configure email settings for notifications\n123 \n124         Args:\n125             email: Email address to send notifications to\n126             smtp_server: SMTP server (default: Gmail)\n127             smtp_port: SMTP port (default: 587)\n128             username: SMTP username (usually your email)\n129             password: SMTP password (use app password for Gmail)\n130 \n131         Returns:\n132             True if configuration was saved successfully\n133         \"\"\"\n134         try:\n135             self.config[\"email_enabled\"] = True\n136             self.config[\"email_settings\"].update(\n137                 {\n138                     \"smtp_server\": smtp_server,\n139                     \"smtp_port\": smtp_port,\n140                     \"username\": username or email,\n141                     \"password\": password,\n142                     \"from_email\": username or email,\n143                     \"to_emails\": (\n144                         [email]\n145                         if email not in self.config[\"email_settings\"][\"to_emails\"]\n146                         else self.config[\"email_settings\"][\"to_emails\"]\n147                     ),\n148                 }\n149             )\n150 \n151             if email not in self.config[\"email_settings\"][\"to_emails\"]:\n152                 self.config[\"email_settings\"][\"to_emails\"].append(email)\n153 \n154             self._save_config(self.config)\n155             self.logger.info(f\"Email accountability configured for: {email}\")\n156             return True\n157 \n158         except Exception as e:\n159             self.logger.error(f\"Failed to set email configuration: {e}\")\n160             return False\n161 \n",
      "col_offset": 4,
      "end_col_offset": 24,
      "filename": "src/core\\recovery\\accountability.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 259,
        "link": "https://cwe.mitre.org/data/definitions/259.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Possible hardcoded password: ''",
      "line_number": 113,
      "line_range": [
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        159,
        160
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.5/plugins/b107_hardcoded_password_default.html",
      "test_id": "B107",
      "test_name": "hardcoded_password_default"
    },
    {
      "code": "321         try:\n322             message = random.choice(self.config[\"motivation_messages\"])\n323 \n",
      "col_offset": 22,
      "end_col_offset": 71,
      "filename": "src/core\\recovery\\accountability.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 330,
        "link": "https://cwe.mitre.org/data/definitions/330.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 322,
      "line_range": [
        322
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.5/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "615     # Uncomment to test email (need to configure first)\n616     bot.set_email(\"your-email@gmail.com\", username=\"your-email@gmail.com\", password=\"your-app-password\")\n617     result = bot.send_test_email()\n",
      "col_offset": 4,
      "end_col_offset": 104,
      "filename": "src/core\\recovery\\accountability.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 259,
        "link": "https://cwe.mitre.org/data/definitions/259.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Possible hardcoded password: 'your-app-password'",
      "line_number": 616,
      "line_range": [
        616
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.5/plugins/b106_hardcoded_password_funcarg.html",
      "test_id": "B106",
      "test_name": "hardcoded_password_funcarg"
    },
    {
      "code": "411                                 matches.append(entry)\n412                 except Exception:\n413                     continue\n414 \n",
      "col_offset": 16,
      "end_col_offset": 28,
      "filename": "src/core\\recovery\\journaling.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 703,
        "link": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Continue detected.",
      "line_number": 412,
      "line_range": [
        412,
        413
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.5/plugins/b112_try_except_continue.html",
      "test_id": "B112",
      "test_name": "try_except_continue"
    }
  ]
}