#!/usr/bin/env python3
"""
Modern GUI Module using PySide6 (Free Alternative to PyQt6)
GitHub Student Pack Edition - Professional UI at Zero Cost
"""

import sys
import os
from pathlib import Path
from typing import Optional, Dict, Any

try:
    from PySide6.QtWidgets import (
        QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
        QTabWidget, QLabel, QPushButton, QTextEdit, QProgressBar,
        QSystemTrayIcon, QMenu, QDialog, QFormLayout, QLineEdit,
        QCheckBox, QComboBox, QSpinBox, QSlider, QGroupBox,
        QTableWidget, QTableWidgetItem, QHeaderView, QMessageBox,
        QFileDialog, QSplitter, QFrame, QScrollArea
    )
    from PySide6.QtCore import (
        Qt, QTimer, QThread, Signal, QSettings, QSize, QPoint,
        QPropertyAnimation, QEasingCurve, QParallelAnimationGroup
    )
    from PySide6.QtGui import (
        QIcon, QPixmap, QFont, QPalette, QColor, QBrush,
        QLinearGradient, QPainter, QAction
    )
    
    PYSIDE6_AVAILABLE = True
    
except ImportError:
    PYSIDE6_AVAILABLE = False
    print("PySide6 not available, falling back to enhanced Tkinter")
    
    # Fallback to enhanced Tkinter with modern styling
    import tkinter as tk
    from tkinter import ttk, messagebox, filedialog
    try:
        import customtkinter as ctk  # Modern Tkinter alternative
        CUSTOMTKINTER_AVAILABLE = True
    except ImportError:
        CUSTOMTKINTER_AVAILABLE = False


class ModernDashboard:
    """
    Modern, professional dashboard using free student tools
    Supports PySide6 (preferred) or enhanced Tkinter fallback
    """
    
    def __init__(self, app_controller):
        self.app = app_controller
        self.window = None
        self.animations = []
        
        # Initialize based on available frameworks
        if PYSIDE6_AVAILABLE:
            self._init_pyside6()
        elif CUSTOMTKINTER_AVAILABLE:
            self._init_customtkinter()
        else:
            self._init_tkinter()
    
    def _init_pyside6(self):
        """Initialize modern PySide6 interface"""
        
        # Create QApplication if not exists
        if not QApplication.instance():
            self.qt_app = QApplication(sys.argv)
        else:
            self.qt_app = QApplication.instance()
        
        # Apply modern dark theme
        self._apply_dark_theme()
        
        # Create main window
        self.window = QMainWindow()
        self.window.setWindowTitle("CleanNet Shield - Student Edition")
        self.window.setMinimumSize(1200, 800)
        
        # Create central widget and layout
        central_widget = QWidget()
        self.window.setCentralWidget(central_widget)
        
        layout = QVBoxLayout(central_widget)
        
        # Create header with animated progress
        self._create_header(layout)
        
        # Create main content area
        self._create_main_content(layout)
        
        # Create status bar
        self._create_status_bar()
        
        # Setup system tray
        self._setup_system_tray()
        
        print("‚úÖ PySide6 modern GUI initialized")
    
    def _apply_dark_theme(self):
        """Apply modern dark theme to the application"""
        
        dark_stylesheet = """
        QMainWindow {
            background-color: #2b2b2b;
            color: #ffffff;
            font-family: 'Segoe UI', Arial, sans-serif;
        }
        
        QTabWidget::pane {
            border: 1px solid #555555;
            background-color: #353535;
        }
        
        QTabBar::tab {
            background-color: #2b2b2b;
            color: #ffffff;
            padding: 10px 20px;
            margin: 2px;
            border-radius: 5px;
        }
        
        QTabBar::tab:selected {
            background-color: #0078d4;
        }
        
        QPushButton {
            background-color: #0078d4;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            font-weight: bold;
        }
        
        QPushButton:hover {
            background-color: #106ebe;
        }
        
        QPushButton:pressed {
            background-color: #005a9e;
        }
        
        QProgressBar {
            border: 2px solid #555555;
            border-radius: 5px;
            text-align: center;
        }
        
        QProgressBar::chunk {
            background-color: #0078d4;
            border-radius: 3px;
        }
        
        QLabel {
            color: #ffffff;
        }
        
        QTextEdit {
            background-color: #404040;
            color: #ffffff;
            border: 1px solid #555555;
            border-radius: 5px;
            padding: 10px;
        }
        
        QGroupBox {
            font-weight: bold;
            border: 2px solid #555555;
            border-radius: 5px;
            margin-top: 10px;
            padding-top: 10px;
        }
        
        QGroupBox::title {
            subcontrol-origin: margin;
            subcontrol-position: top center;
            padding: 0 5px;
        }
        """
        
        self.qt_app.setStyleSheet(dark_stylesheet)
    
    def _create_header(self, layout):
        """Create animated header with real-time stats"""
        
        header_frame = QFrame()
        header_frame.setFixedHeight(150)
        header_frame.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #0078d4, stop:1 #005a9e);
                border-radius: 10px;
                margin: 10px;
            }
        """)
        
        header_layout = QHBoxLayout(header_frame)
        
        # App title and version
        title_layout = QVBoxLayout()
        title_label = QLabel("üõ°Ô∏è CleanNet Shield")
        title_label.setStyleSheet("font-size: 24px; font-weight: bold; color: white;")
        
        version_label = QLabel("Student Edition v3.0 - Powered by GitHub Student Pack")
        version_label.setStyleSheet("font-size: 12px; color: #e1e1e1;")
        
        title_layout.addWidget(title_label)
        title_layout.addWidget(version_label)
        
        # Real-time stats
        stats_layout = QVBoxLayout()
        
        self.streak_label = QLabel("üî• Current Streak: 0 days")
        self.streak_label.setStyleSheet("font-size: 18px; font-weight: bold; color: white;")
        
        self.status_label = QLabel("‚úÖ Protection Active")
        self.status_label.setStyleSheet("font-size: 14px; color: #90EE90;")
        
        stats_layout.addWidget(self.streak_label)
        stats_layout.addWidget(self.status_label)
        
        # Progress visualization
        progress_layout = QVBoxLayout()
        
        progress_label = QLabel("Progress to Next Milestone")
        progress_label.setStyleSheet("color: white; font-weight: bold;")
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setMinimum(0)
        self.progress_bar.setMaximum(100)
        self.progress_bar.setValue(75)
        
        progress_layout.addWidget(progress_label)
        progress_layout.addWidget(self.progress_bar)
        
        header_layout.addLayout(title_layout)
        header_layout.addStretch()
        header_layout.addLayout(stats_layout)
        header_layout.addStretch()
        header_layout.addLayout(progress_layout)
        
        layout.addWidget(header_frame)
    
    def _create_main_content(self, layout):
        """Create main content area with tabs"""
        
        # Create tab widget
        self.tab_widget = QTabWidget()
        
        # Dashboard tab
        self._create_dashboard_tab()
        
        # Recovery tab
        self._create_recovery_tab()
        
        # Blocking tab
        self._create_blocking_tab()
        
        # Analytics tab
        self._create_analytics_tab()
        
        # Settings tab
        self._create_settings_tab()
        
        layout.addWidget(self.tab_widget)
    
    def _create_dashboard_tab(self):
        """Create main dashboard tab"""
        
        dashboard_widget = QWidget()
        layout = QVBoxLayout(dashboard_widget)
        
        # Quick actions
        actions_group = QGroupBox("Quick Actions")
        actions_layout = QHBoxLayout(actions_group)
        
        mark_clean_btn = QPushButton("‚úÖ Mark Clean Day")
        mark_clean_btn.clicked.connect(self._mark_clean_day)
        
        journal_btn = QPushButton("üìù Open Journal")
        journal_btn.clicked.connect(self._open_journal)
        
        emergency_btn = QPushButton("üÜò Emergency Support")
        emergency_btn.setStyleSheet("background-color: #d13212;")
        emergency_btn.clicked.connect(self._emergency_support)
        
        actions_layout.addWidget(mark_clean_btn)
        actions_layout.addWidget(journal_btn)
        actions_layout.addWidget(emergency_btn)
        
        layout.addWidget(actions_group)
        
        # Recent activity
        activity_group = QGroupBox("Recent Activity")
        activity_layout = QVBoxLayout(activity_group)
        
        self.activity_text = QTextEdit()
        self.activity_text.setMaximumHeight(200)
        self.activity_text.setPlaceholderText("Recent app activity will appear here...")
        
        activity_layout.addWidget(self.activity_text)
        layout.addWidget(activity_group)
        
        # Add to tabs
        self.tab_widget.addTab(dashboard_widget, "üè† Dashboard")
    
    def _create_recovery_tab(self):
        """Create recovery tools tab"""
        
        recovery_widget = QWidget()
        layout = QVBoxLayout(recovery_widget)
        
        # Streak tracking
        streak_group = QGroupBox("Streak Tracking")
        streak_layout = QVBoxLayout(streak_group)
        
        streak_display = QLabel("Current Streak: 5 days")
        streak_display.setStyleSheet("font-size: 20px; font-weight: bold; color: #0078d4;")
        
        milestone_label = QLabel("Next Milestone: 7 days (2 days to go)")
        
        streak_layout.addWidget(streak_display)
        streak_layout.addWidget(milestone_label)
        
        layout.addWidget(streak_group)
        
        # Journal
        journal_group = QGroupBox("Daily Journal")
        journal_layout = QVBoxLayout(journal_group)
        
        self.journal_text = QTextEdit()
        self.journal_text.setPlaceholderText("How are you feeling today? Write about your thoughts, challenges, and victories...")
        
        save_journal_btn = QPushButton("üíæ Save Journal Entry")
        save_journal_btn.clicked.connect(self._save_journal)
        
        journal_layout.addWidget(self.journal_text)
        journal_layout.addWidget(save_journal_btn)
        
        layout.addWidget(journal_group)
        
        self.tab_widget.addTab(recovery_widget, "üéØ Recovery")
    
    def _create_blocking_tab(self):
        """Create content blocking management tab"""
        
        blocking_widget = QWidget()
        layout = QVBoxLayout(blocking_widget)
        
        # Protection status
        status_group = QGroupBox("Protection Status")
        status_layout = QVBoxLayout(status_group)
        
        protection_status = QLabel("üõ°Ô∏è All protections are ACTIVE")
        protection_status.setStyleSheet("font-size: 16px; color: #90EE90; font-weight: bold;")
        
        last_update = QLabel("Last blocklist update: 2 hours ago")
        
        update_btn = QPushButton("üîÑ Update Blocklists Now")
        update_btn.clicked.connect(self._update_blocklists)
        
        status_layout.addWidget(protection_status)
        status_layout.addWidget(last_update)
        status_layout.addWidget(update_btn)
        
        layout.addWidget(status_group)
        
        # Blocklist management
        blocklist_group = QGroupBox("Blocklist Management")
        blocklist_layout = QVBoxLayout(blocklist_group)
        
        self.blocklist_table = QTableWidget()
        self.blocklist_table.setColumnCount(3)
        self.blocklist_table.setHorizontalHeaderLabels(["Domain", "Category", "Status"])
        
        # Sample data
        sample_domains = [
            ("example-adult-site.com", "Adult Content", "Blocked"),
            ("gambling-site.com", "Gambling", "Blocked"),
            ("social-nsfw.com", "Social Media", "Blocked")
        ]
        
        self.blocklist_table.setRowCount(len(sample_domains))
        for i, (domain, category, status) in enumerate(sample_domains):
            self.blocklist_table.setItem(i, 0, QTableWidgetItem(domain))
            self.blocklist_table.setItem(i, 1, QTableWidgetItem(category))
            self.blocklist_table.setItem(i, 2, QTableWidgetItem(status))
        
        blocklist_layout.addWidget(self.blocklist_table)
        layout.addWidget(blocklist_group)
        
        self.tab_widget.addTab(blocking_widget, "üö´ Blocking")
    
    def _create_analytics_tab(self):
        """Create analytics and insights tab"""
        
        analytics_widget = QWidget()
        layout = QVBoxLayout(analytics_widget)
        
        # Progress overview
        overview_group = QGroupBox("Progress Overview")
        overview_layout = QVBoxLayout(overview_group)
        
        stats_text = """
üìä Recovery Statistics:
‚Ä¢ Total Clean Days: 45
‚Ä¢ Longest Streak: 12 days
‚Ä¢ Average Mood Rating: 7.2/10
‚Ä¢ Journal Entries: 38
‚Ä¢ Milestones Achieved: 3
        """
        
        stats_label = QLabel(stats_text)
        stats_label.setStyleSheet("font-family: 'Courier New'; line-height: 1.5;")
        
        overview_layout.addWidget(stats_label)
        layout.addWidget(overview_group)
        
        # Insights
        insights_group = QGroupBox("Insights & Patterns")
        insights_layout = QVBoxLayout(insights_group)
        
        insights_text = """
üß† AI-Powered Insights:
‚Ä¢ Your strongest day is Tuesday (avg mood: 8.1)
‚Ä¢ Most challenging time: 6-8 PM weekdays
‚Ä¢ Effective coping strategies: Exercise, Reading
‚Ä¢ Trigger pattern: Stress-related incidents
        """
        
        insights_label = QLabel(insights_text)
        insights_label.setStyleSheet("font-family: 'Courier New'; line-height: 1.5;")
        
        insights_layout.addWidget(insights_label)
        layout.addWidget(insights_group)
        
        self.tab_widget.addTab(analytics_widget, "üìà Analytics")
    
    def _create_settings_tab(self):
        """Create settings and configuration tab"""
        
        settings_widget = QWidget()
        layout = QVBoxLayout(settings_widget)
        
        # General settings
        general_group = QGroupBox("General Settings")
        general_layout = QFormLayout(general_group)
        
        # Notification settings
        email_check = QCheckBox("Enable email notifications")
        email_check.setChecked(True)
        
        telegram_check = QCheckBox("Enable Telegram notifications")
        telegram_check.setChecked(False)
        
        # Theme selection
        theme_combo = QComboBox()
        theme_combo.addItems(["Dark Theme", "Light Theme", "Auto"])
        theme_combo.setCurrentText("Dark Theme")
        
        general_layout.addRow("Email Notifications:", email_check)
        general_layout.addRow("Telegram Notifications:", telegram_check)
        general_layout.addRow("Theme:", theme_combo)
        
        layout.addWidget(general_group)
        
        # Security settings
        security_group = QGroupBox("Security Settings")
        security_layout = QFormLayout(security_group)
        
        tamper_check = QCheckBox("Enable tamper protection")
        tamper_check.setChecked(True)
        
        service_check = QCheckBox("Run as Windows Service")
        service_check.setChecked(True)
        
        security_layout.addRow("Tamper Protection:", tamper_check)
        security_layout.addRow("Service Mode:", service_check)
        
        layout.addWidget(security_group)
        
        self.tab_widget.addTab(settings_widget, "‚öôÔ∏è Settings")
    
    def _create_status_bar(self):
        """Create status bar with real-time information"""
        
        status_bar = self.window.statusBar()
        
        # Status messages
        status_bar.showMessage("CleanNet Shield - Student Edition | Protection Active | GitHub Student Pack")
        
        # Add permanent widgets
        version_label = QLabel("v3.0.0-student")
        status_bar.addPermanentWidget(version_label)
    
    def _setup_system_tray(self):
        """Setup system tray integration"""
        
        if QSystemTrayIcon.isSystemTrayAvailable():
            self.tray_icon = QSystemTrayIcon()
            
            # Create tray menu
            tray_menu = QMenu()
            
            show_action = QAction("Show CleanNet Shield", self.window)
            show_action.triggered.connect(self.window.show)
            
            mark_clean_action = QAction("Mark Clean Day", self.window)
            mark_clean_action.triggered.connect(self._mark_clean_day)
            
            quit_action = QAction("Quit", self.window)
            quit_action.triggered.connect(self.qt_app.quit)
            
            tray_menu.addAction(show_action)
            tray_menu.addSeparator()
            tray_menu.addAction(mark_clean_action)
            tray_menu.addSeparator()
            tray_menu.addAction(quit_action)
            
            self.tray_icon.setContextMenu(tray_menu)
            
            # Set icon (would use actual icon file in production)
            # self.tray_icon.setIcon(QIcon("assets/tray_icon.png"))
            
            self.tray_icon.show()
    
    def _mark_clean_day(self):
        """Mark current day as clean"""
        # This would integrate with the streak tracker
        QMessageBox.information(self.window, "Success", "Clean day marked! Keep up the great work! üéâ")
    
    def _open_journal(self):
        """Open journal interface"""
        # Switch to recovery tab and focus on journal
        self.tab_widget.setCurrentIndex(1)
        self.journal_text.setFocus()
    
    def _save_journal(self):
        """Save journal entry"""
        # This would integrate with the journaling system
        QMessageBox.information(self.window, "Saved", "Journal entry saved successfully! üìù")
    
    def _emergency_support(self):
        """Show emergency support dialog"""
        
        msg = QMessageBox()
        msg.setWindowTitle("Emergency Support")
        msg.setText("üÜò You're not alone. Help is available.")
        msg.setInformativeText("""
If you're in crisis:
‚Ä¢ Call: 988 (Suicide & Crisis Lifeline)
‚Ä¢ Text: HOME to 741741 (Crisis Text Line)
‚Ä¢ Visit: Your local emergency room

Recovery Resources:
‚Ä¢ NoFap Community: r/NoFap
‚Ä¢ SAA Meetings: saa-recovery.org
‚Ä¢ SMART Recovery: smartrecovery.org
        """)
        msg.setIcon(QMessageBox.Information)
        msg.exec()
    
    def _update_blocklists(self):
        """Update content blocklists"""
        # This would integrate with the blocklist updater
        QMessageBox.information(self.window, "Updating", "Blocklists are being updated... üîÑ")
    
    def show(self):
        """Show the main window"""
        if self.window:
            self.window.show()
    
    def run(self):
        """Run the application"""
        if PYSIDE6_AVAILABLE and hasattr(self, 'qt_app'):
            self.window.show()
            return self.qt_app.exec()
        else:
            self.window.mainloop()


def main():
    """Main entry point for the modern GUI"""
    
    print("üéì Starting CleanNet Shield Student Edition...")
    print("üí∞ Cost: $0 (Thanks to GitHub Student Pack!)")
    
    # Mock app controller for demo
    class MockController:
        pass
    
    controller = MockController()
    
    # Create and run the modern dashboard
    dashboard = ModernDashboard(controller)
    dashboard.run()


if __name__ == "__main__":
    main()
